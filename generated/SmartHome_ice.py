# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Status' not in _M_SmartHome.__dict__:
    _M_SmartHome.Status = Ice.createTempClass()
    class Status(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Status.SUCCESS = Status("SUCCESS", 0)
    Status.FAIL = Status("FAIL", 1)
    Status._enumerators = { 0:Status.SUCCESS, 1:Status.FAIL }

    _M_SmartHome._t_Status = IcePy.defineEnum('::SmartHome::Status', Status, (), Status._enumerators)

    _M_SmartHome.Status = Status
    del Status

if 'State' not in _M_SmartHome.__dict__:
    _M_SmartHome.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.ON = State("ON", 0)
    State.OFF = State("OFF", 1)
    State._enumerators = { 0:State.ON, 1:State.OFF }

    _M_SmartHome._t_State = IcePy.defineEnum('::SmartHome::State', State, (), State._enumerators)

    _M_SmartHome.State = State
    del State

if 'TemperatureRange' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureRange = Ice.createTempClass()
    class TemperatureRange(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TemperatureRange.MIN = TemperatureRange("MIN", 0)
    TemperatureRange.MAX = TemperatureRange("MAX", 1)
    TemperatureRange._enumerators = { 0:TemperatureRange.MIN, 1:TemperatureRange.MAX }

    _M_SmartHome._t_TemperatureRange = IcePy.defineEnum('::SmartHome::TemperatureRange', TemperatureRange, (), TemperatureRange._enumerators)

    _M_SmartHome.TemperatureRange = TemperatureRange
    del TemperatureRange

if 'NotFound' not in _M_SmartHome.__dict__:
    _M_SmartHome.NotFound = Ice.createTempClass()
    class NotFound(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::NotFound'

    _M_SmartHome._t_NotFound = IcePy.defineException('::SmartHome::NotFound', NotFound, (), False, None, ())
    NotFound._ice_type = _M_SmartHome._t_NotFound

    _M_SmartHome.NotFound = NotFound
    del NotFound

if 'DeviceTurnedOff' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceTurnedOff = Ice.createTempClass()
    class DeviceTurnedOff(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceTurnedOff'

    _M_SmartHome._t_DeviceTurnedOff = IcePy.defineException('::SmartHome::DeviceTurnedOff', DeviceTurnedOff, (), False, None, ())
    DeviceTurnedOff._ice_type = _M_SmartHome._t_DeviceTurnedOff

    _M_SmartHome.DeviceTurnedOff = DeviceTurnedOff
    del DeviceTurnedOff

if 'ContainerFull' not in _M_SmartHome.__dict__:
    _M_SmartHome.ContainerFull = Ice.createTempClass()
    class ContainerFull(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ContainerFull'

    _M_SmartHome._t_ContainerFull = IcePy.defineException('::SmartHome::ContainerFull', ContainerFull, (), False, None, ())
    ContainerFull._ice_type = _M_SmartHome._t_ContainerFull

    _M_SmartHome.ContainerFull = ContainerFull
    del ContainerFull

if 'TemperatureOutOfRange' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureOutOfRange = Ice.createTempClass()
    class TemperatureOutOfRange(Ice.UserException):
        def __init__(self, text=''):
            self.text = text

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::TemperatureOutOfRange'

    _M_SmartHome._t_TemperatureOutOfRange = IcePy.defineException('::SmartHome::TemperatureOutOfRange', TemperatureOutOfRange, (), False, None, (('text', (), IcePy._t_string, False, 0),))
    TemperatureOutOfRange._ice_type = _M_SmartHome._t_TemperatureOutOfRange

    _M_SmartHome.TemperatureOutOfRange = TemperatureOutOfRange
    del TemperatureOutOfRange

if 'TvApp' not in _M_SmartHome.__dict__:
    _M_SmartHome.TvApp = Ice.createTempClass()
    class TvApp(object):
        def __init__(self, name='', category=''):
            self.name = name
            self.category = category

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.category)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.TvApp):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TvApp)

        __repr__ = __str__

    _M_SmartHome._t_TvApp = IcePy.defineStruct('::SmartHome::TvApp', TvApp, (), (
        ('name', (), IcePy._t_string),
        ('category', (), IcePy._t_string)
    ))

    _M_SmartHome.TvApp = TvApp
    del TvApp

if 'Song' not in _M_SmartHome.__dict__:
    _M_SmartHome.Song = Ice.createTempClass()
    class Song(object):
        def __init__(self, name='', duration=0, category=''):
            self.name = name
            self.duration = duration
            self.category = category

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.duration)
            _h = 5 * _h + Ice.getHash(self.category)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Song):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.duration is None or other.duration is None:
                    if self.duration != other.duration:
                        return (-1 if self.duration is None else 1)
                else:
                    if self.duration < other.duration:
                        return -1
                    elif self.duration > other.duration:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Song)

        __repr__ = __str__

    _M_SmartHome._t_Song = IcePy.defineStruct('::SmartHome::Song', Song, (), (
        ('name', (), IcePy._t_string),
        ('duration', (), IcePy._t_int),
        ('category', (), IcePy._t_string)
    ))

    _M_SmartHome.Song = Song
    del Song

if 'Temperature' not in _M_SmartHome.__dict__:
    _M_SmartHome.Temperature = Ice.createTempClass()
    class Temperature(object):
        def __init__(self, value=0, unit="*C"):
            self.value = value
            self.unit = unit

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.value)
            _h = 5 * _h + Ice.getHash(self.unit)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Temperature):
                return NotImplemented
            else:
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                if self.unit is None or other.unit is None:
                    if self.unit != other.unit:
                        return (-1 if self.unit is None else 1)
                else:
                    if self.unit < other.unit:
                        return -1
                    elif self.unit > other.unit:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Temperature)

        __repr__ = __str__

    _M_SmartHome._t_Temperature = IcePy.defineStruct('::SmartHome::Temperature', Temperature, (), (
        ('value', (), IcePy._t_int),
        ('unit', (), IcePy._t_string)
    ))

    _M_SmartHome.Temperature = Temperature
    del Temperature

if 'TemperatureData' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureData = Ice.createTempClass()
    class TemperatureData(object):
        def __init__(self, dayBack=0, avgTemperature=Ice._struct_marker):
            self.dayBack = dayBack
            if avgTemperature is Ice._struct_marker:
                self.avgTemperature = _M_SmartHome.Temperature()
            else:
                self.avgTemperature = avgTemperature

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.dayBack)
            _h = 5 * _h + Ice.getHash(self.avgTemperature)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.TemperatureData):
                return NotImplemented
            else:
                if self.dayBack is None or other.dayBack is None:
                    if self.dayBack != other.dayBack:
                        return (-1 if self.dayBack is None else 1)
                else:
                    if self.dayBack < other.dayBack:
                        return -1
                    elif self.dayBack > other.dayBack:
                        return 1
                if self.avgTemperature is None or other.avgTemperature is None:
                    if self.avgTemperature != other.avgTemperature:
                        return (-1 if self.avgTemperature is None else 1)
                else:
                    if self.avgTemperature < other.avgTemperature:
                        return -1
                    elif self.avgTemperature > other.avgTemperature:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureData)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureData = IcePy.defineStruct('::SmartHome::TemperatureData', TemperatureData, (), (
        ('dayBack', (), IcePy._t_int),
        ('avgTemperature', (), _M_SmartHome._t_Temperature)
    ))

    _M_SmartHome.TemperatureData = TemperatureData
    del TemperatureData

if 'ObjectProxy' not in _M_SmartHome.__dict__:
    _M_SmartHome.ObjectProxy = Ice.createTempClass()
    class ObjectProxy(object):
        def __init__(self, name='', category='', address=''):
            self.name = name
            self.category = category
            self.address = address

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.category)
            _h = 5 * _h + Ice.getHash(self.address)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.ObjectProxy):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                if self.address is None or other.address is None:
                    if self.address != other.address:
                        return (-1 if self.address is None else 1)
                else:
                    if self.address < other.address:
                        return -1
                    elif self.address > other.address:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ObjectProxy)

        __repr__ = __str__

    _M_SmartHome._t_ObjectProxy = IcePy.defineStruct('::SmartHome::ObjectProxy', ObjectProxy, (), (
        ('name', (), IcePy._t_string),
        ('category', (), IcePy._t_string),
        ('address', (), IcePy._t_string)
    ))

    _M_SmartHome.ObjectProxy = ObjectProxy
    del ObjectProxy

if '_t_Applications' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Applications = IcePy.defineSequence('::SmartHome::Applications', (), _M_SmartHome._t_TvApp)

if '_t_Songs' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Songs = IcePy.defineSequence('::SmartHome::Songs', (), _M_SmartHome._t_Song)

if '_t_TemperatureHistory' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_TemperatureHistory = IcePy.defineSequence('::SmartHome::TemperatureHistory', (), _M_SmartHome._t_TemperatureData)

if '_t_AvailableDevices' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_AvailableDevices = IcePy.defineSequence('::SmartHome::AvailableDevices', (), _M_SmartHome._t_ObjectProxy)

_M_SmartHome._t_MultimediaDevice = IcePy.defineValue('::SmartHome::MultimediaDevice', Ice.Value, -1, (), False, True, None, ())

if 'MultimediaDevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.MultimediaDevicePrx = Ice.createTempClass()
    class MultimediaDevicePrx(Ice.ObjectPrx):

        def turnOff(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.MultimediaDevice._op_turnOff.end(self, _r)

        def turnOn(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MultimediaDevice._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.MultimediaDevice._op_turnOn.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.MultimediaDevice._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MultimediaDevice._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.MultimediaDevice._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.MultimediaDevicePrx.ice_checkedCast(proxy, '::SmartHome::MultimediaDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.MultimediaDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MultimediaDevice'
    _M_SmartHome._t_MultimediaDevicePrx = IcePy.defineProxy('::SmartHome::MultimediaDevice', MultimediaDevicePrx)

    _M_SmartHome.MultimediaDevicePrx = MultimediaDevicePrx
    del MultimediaDevicePrx

    _M_SmartHome.MultimediaDevice = Ice.createTempClass()
    class MultimediaDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::MultimediaDevice')

        def ice_id(self, current=None):
            return '::SmartHome::MultimediaDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MultimediaDevice'

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_MultimediaDeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_MultimediaDeviceDisp = IcePy.defineClass('::SmartHome::MultimediaDevice', MultimediaDevice, (), None, ())
    MultimediaDevice._ice_type = _M_SmartHome._t_MultimediaDeviceDisp

    MultimediaDevice._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Status, False, 0), ())
    MultimediaDevice._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Status, False, 0), ())
    MultimediaDevice._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_State, False, 0), ())

    _M_SmartHome.MultimediaDevice = MultimediaDevice
    del MultimediaDevice

_M_SmartHome._t_TvSmart = IcePy.defineValue('::SmartHome::TvSmart', Ice.Value, -1, (), False, True, None, ())

if 'TvSmartPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TvSmartPrx = Ice.createTempClass()
    class TvSmartPrx(_M_SmartHome.MultimediaDevicePrx):

        def getApplicationsList(self, context=None):
            return _M_SmartHome.TvSmart._op_getApplicationsList.invoke(self, ((), context))

        def getApplicationsListAsync(self, context=None):
            return _M_SmartHome.TvSmart._op_getApplicationsList.invokeAsync(self, ((), context))

        def begin_getApplicationsList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TvSmart._op_getApplicationsList.begin(self, ((), _response, _ex, _sent, context))

        def end_getApplicationsList(self, _r):
            return _M_SmartHome.TvSmart._op_getApplicationsList.end(self, _r)

        def openApp(self, appName, context=None):
            return _M_SmartHome.TvSmart._op_openApp.invoke(self, ((appName, ), context))

        def openAppAsync(self, appName, context=None):
            return _M_SmartHome.TvSmart._op_openApp.invokeAsync(self, ((appName, ), context))

        def begin_openApp(self, appName, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TvSmart._op_openApp.begin(self, ((appName, ), _response, _ex, _sent, context))

        def end_openApp(self, _r):
            return _M_SmartHome.TvSmart._op_openApp.end(self, _r)

        def openedApp(self, context=None):
            return _M_SmartHome.TvSmart._op_openedApp.invoke(self, ((), context))

        def openedAppAsync(self, context=None):
            return _M_SmartHome.TvSmart._op_openedApp.invokeAsync(self, ((), context))

        def begin_openedApp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TvSmart._op_openedApp.begin(self, ((), _response, _ex, _sent, context))

        def end_openedApp(self, _r):
            return _M_SmartHome.TvSmart._op_openedApp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TvSmartPrx.ice_checkedCast(proxy, '::SmartHome::TvSmart', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TvSmartPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TvSmart'
    _M_SmartHome._t_TvSmartPrx = IcePy.defineProxy('::SmartHome::TvSmart', TvSmartPrx)

    _M_SmartHome.TvSmartPrx = TvSmartPrx
    del TvSmartPrx

    _M_SmartHome.TvSmart = Ice.createTempClass()
    class TvSmart(_M_SmartHome.MultimediaDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::MultimediaDevice', '::SmartHome::TvSmart')

        def ice_id(self, current=None):
            return '::SmartHome::TvSmart'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TvSmart'

        def getApplicationsList(self, current=None):
            raise NotImplementedError("servant method 'getApplicationsList' not implemented")

        def openApp(self, appName, current=None):
            raise NotImplementedError("servant method 'openApp' not implemented")

        def openedApp(self, current=None):
            raise NotImplementedError("servant method 'openedApp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TvSmartDisp)

        __repr__ = __str__

    _M_SmartHome._t_TvSmartDisp = IcePy.defineClass('::SmartHome::TvSmart', TvSmart, (), None, (_M_SmartHome._t_MultimediaDeviceDisp,))
    TvSmart._ice_type = _M_SmartHome._t_TvSmartDisp

    TvSmart._op_getApplicationsList = IcePy.Operation('getApplicationsList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Applications, False, 0), ())
    TvSmart._op_openApp = IcePy.Operation('openApp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_SmartHome._t_Status, False, 0), (_M_SmartHome._t_NotFound, _M_SmartHome._t_DeviceTurnedOff))
    TvSmart._op_openedApp = IcePy.Operation('openedApp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_TvApp, False, 0), (_M_SmartHome._t_DeviceTurnedOff,))

    _M_SmartHome.TvSmart = TvSmart
    del TvSmart

_M_SmartHome._t_MusicPlayer = IcePy.defineValue('::SmartHome::MusicPlayer', Ice.Value, -1, (), False, True, None, ())

if 'MusicPlayerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.MusicPlayerPrx = Ice.createTempClass()
    class MusicPlayerPrx(_M_SmartHome.MultimediaDevicePrx):

        def getAvailableSongs(self, context=None):
            return _M_SmartHome.MusicPlayer._op_getAvailableSongs.invoke(self, ((), context))

        def getAvailableSongsAsync(self, context=None):
            return _M_SmartHome.MusicPlayer._op_getAvailableSongs.invokeAsync(self, ((), context))

        def begin_getAvailableSongs(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MusicPlayer._op_getAvailableSongs.begin(self, ((), _response, _ex, _sent, context))

        def end_getAvailableSongs(self, _r):
            return _M_SmartHome.MusicPlayer._op_getAvailableSongs.end(self, _r)

        def playSong(self, songName, context=None):
            return _M_SmartHome.MusicPlayer._op_playSong.invoke(self, ((songName, ), context))

        def playSongAsync(self, songName, context=None):
            return _M_SmartHome.MusicPlayer._op_playSong.invokeAsync(self, ((songName, ), context))

        def begin_playSong(self, songName, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MusicPlayer._op_playSong.begin(self, ((songName, ), _response, _ex, _sent, context))

        def end_playSong(self, _r):
            return _M_SmartHome.MusicPlayer._op_playSong.end(self, _r)

        def currentlyPlaying(self, context=None):
            return _M_SmartHome.MusicPlayer._op_currentlyPlaying.invoke(self, ((), context))

        def currentlyPlayingAsync(self, context=None):
            return _M_SmartHome.MusicPlayer._op_currentlyPlaying.invokeAsync(self, ((), context))

        def begin_currentlyPlaying(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MusicPlayer._op_currentlyPlaying.begin(self, ((), _response, _ex, _sent, context))

        def end_currentlyPlaying(self, _r):
            return _M_SmartHome.MusicPlayer._op_currentlyPlaying.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.MusicPlayerPrx.ice_checkedCast(proxy, '::SmartHome::MusicPlayer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.MusicPlayerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MusicPlayer'
    _M_SmartHome._t_MusicPlayerPrx = IcePy.defineProxy('::SmartHome::MusicPlayer', MusicPlayerPrx)

    _M_SmartHome.MusicPlayerPrx = MusicPlayerPrx
    del MusicPlayerPrx

    _M_SmartHome.MusicPlayer = Ice.createTempClass()
    class MusicPlayer(_M_SmartHome.MultimediaDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::MultimediaDevice', '::SmartHome::MusicPlayer')

        def ice_id(self, current=None):
            return '::SmartHome::MusicPlayer'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MusicPlayer'

        def getAvailableSongs(self, current=None):
            raise NotImplementedError("servant method 'getAvailableSongs' not implemented")

        def playSong(self, songName, current=None):
            raise NotImplementedError("servant method 'playSong' not implemented")

        def currentlyPlaying(self, current=None):
            raise NotImplementedError("servant method 'currentlyPlaying' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_MusicPlayerDisp)

        __repr__ = __str__

    _M_SmartHome._t_MusicPlayerDisp = IcePy.defineClass('::SmartHome::MusicPlayer', MusicPlayer, (), None, (_M_SmartHome._t_MultimediaDeviceDisp,))
    MusicPlayer._ice_type = _M_SmartHome._t_MusicPlayerDisp

    MusicPlayer._op_getAvailableSongs = IcePy.Operation('getAvailableSongs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Songs, False, 0), (_M_SmartHome._t_DeviceTurnedOff,))
    MusicPlayer._op_playSong = IcePy.Operation('playSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_SmartHome._t_Status, False, 0), (_M_SmartHome._t_DeviceTurnedOff, _M_SmartHome._t_NotFound))
    MusicPlayer._op_currentlyPlaying = IcePy.Operation('currentlyPlaying', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Song, False, 0), (_M_SmartHome._t_DeviceTurnedOff,))

    _M_SmartHome.MusicPlayer = MusicPlayer
    del MusicPlayer

_M_SmartHome._t_Fridge = IcePy.defineValue('::SmartHome::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgePrx = Ice.createTempClass()
    class FridgePrx(Ice.ObjectPrx):

        def currentTemperature(self, context=None):
            return _M_SmartHome.Fridge._op_currentTemperature.invoke(self, ((), context))

        def currentTemperatureAsync(self, context=None):
            return _M_SmartHome.Fridge._op_currentTemperature.invokeAsync(self, ((), context))

        def begin_currentTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_currentTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_currentTemperature(self, _r):
            return _M_SmartHome.Fridge._op_currentTemperature.end(self, _r)

        def changeTemperature(self, temperature, context=None):
            return _M_SmartHome.Fridge._op_changeTemperature.invoke(self, ((temperature, ), context))

        def changeTemperatureAsync(self, temperature, context=None):
            return _M_SmartHome.Fridge._op_changeTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_changeTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_changeTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_changeTemperature(self, _r):
            return _M_SmartHome.Fridge._op_changeTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgePrx.ice_checkedCast(proxy, '::SmartHome::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'
    _M_SmartHome._t_FridgePrx = IcePy.defineProxy('::SmartHome::Fridge', FridgePrx)

    _M_SmartHome.FridgePrx = FridgePrx
    del FridgePrx

    _M_SmartHome.Fridge = Ice.createTempClass()
    class Fridge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Fridge')

        def ice_id(self, current=None):
            return '::SmartHome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'

        def currentTemperature(self, current=None):
            raise NotImplementedError("servant method 'currentTemperature' not implemented")

        def changeTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'changeTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeDisp = IcePy.defineClass('::SmartHome::Fridge', Fridge, (), None, ())
    Fridge._ice_type = _M_SmartHome._t_FridgeDisp

    Fridge._op_currentTemperature = IcePy.Operation('currentTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Temperature, False, 0), ())
    Fridge._op_changeTemperature = IcePy.Operation('changeTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_SmartHome._t_Status, False, 0), (_M_SmartHome._t_TemperatureOutOfRange,))

    _M_SmartHome.Fridge = Fridge
    del Fridge

_M_SmartHome._t_BigFridge = IcePy.defineValue('::SmartHome::BigFridge', Ice.Value, -1, (), False, True, None, ())

if 'BigFridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.BigFridgePrx = Ice.createTempClass()
    class BigFridgePrx(_M_SmartHome.FridgePrx):

        def produceIce(self, context=None):
            return _M_SmartHome.BigFridge._op_produceIce.invoke(self, ((), context))

        def produceIceAsync(self, context=None):
            return _M_SmartHome.BigFridge._op_produceIce.invokeAsync(self, ((), context))

        def begin_produceIce(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.BigFridge._op_produceIce.begin(self, ((), _response, _ex, _sent, context))

        def end_produceIce(self, _r):
            return _M_SmartHome.BigFridge._op_produceIce.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.BigFridgePrx.ice_checkedCast(proxy, '::SmartHome::BigFridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.BigFridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BigFridge'
    _M_SmartHome._t_BigFridgePrx = IcePy.defineProxy('::SmartHome::BigFridge', BigFridgePrx)

    _M_SmartHome.BigFridgePrx = BigFridgePrx
    del BigFridgePrx

    _M_SmartHome.BigFridge = Ice.createTempClass()
    class BigFridge(_M_SmartHome.Fridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::BigFridge', '::SmartHome::Fridge')

        def ice_id(self, current=None):
            return '::SmartHome::BigFridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BigFridge'

        def produceIce(self, current=None):
            raise NotImplementedError("servant method 'produceIce' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BigFridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_BigFridgeDisp = IcePy.defineClass('::SmartHome::BigFridge', BigFridge, (), None, (_M_SmartHome._t_FridgeDisp,))
    BigFridge._ice_type = _M_SmartHome._t_BigFridgeDisp

    BigFridge._op_produceIce = IcePy.Operation('produceIce', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Status, False, 0), (_M_SmartHome._t_ContainerFull,))

    _M_SmartHome.BigFridge = BigFridge
    del BigFridge

_M_SmartHome._t_Thermometer = IcePy.defineValue('::SmartHome::Thermometer', Ice.Value, -1, (), False, True, None, ())

if 'ThermometerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermometerPrx = Ice.createTempClass()
    class ThermometerPrx(Ice.ObjectPrx):

        def getCurrentTemperature(self, context=None):
            return _M_SmartHome.Thermometer._op_getCurrentTemperature.invoke(self, ((), context))

        def getCurrentTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermometer._op_getCurrentTemperature.invokeAsync(self, ((), context))

        def begin_getCurrentTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermometer._op_getCurrentTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTemperature(self, _r):
            return _M_SmartHome.Thermometer._op_getCurrentTemperature.end(self, _r)

        def getLastWeekTemperature(self, context=None):
            return _M_SmartHome.Thermometer._op_getLastWeekTemperature.invoke(self, ((), context))

        def getLastWeekTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermometer._op_getLastWeekTemperature.invokeAsync(self, ((), context))

        def begin_getLastWeekTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermometer._op_getLastWeekTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getLastWeekTemperature(self, _r):
            return _M_SmartHome.Thermometer._op_getLastWeekTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ThermometerPrx.ice_checkedCast(proxy, '::SmartHome::Thermometer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ThermometerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermometer'
    _M_SmartHome._t_ThermometerPrx = IcePy.defineProxy('::SmartHome::Thermometer', ThermometerPrx)

    _M_SmartHome.ThermometerPrx = ThermometerPrx
    del ThermometerPrx

    _M_SmartHome.Thermometer = Ice.createTempClass()
    class Thermometer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Thermometer')

        def ice_id(self, current=None):
            return '::SmartHome::Thermometer'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermometer'

        def getCurrentTemperature(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTemperature' not implemented")

        def getLastWeekTemperature(self, current=None):
            raise NotImplementedError("servant method 'getLastWeekTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermometerDisp)

        __repr__ = __str__

    _M_SmartHome._t_ThermometerDisp = IcePy.defineClass('::SmartHome::Thermometer', Thermometer, (), None, ())
    Thermometer._ice_type = _M_SmartHome._t_ThermometerDisp

    Thermometer._op_getCurrentTemperature = IcePy.Operation('getCurrentTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Temperature, False, 0), ())
    Thermometer._op_getLastWeekTemperature = IcePy.Operation('getLastWeekTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_TemperatureHistory, False, 0), ())

    _M_SmartHome.Thermometer = Thermometer
    del Thermometer

_M_SmartHome._t_DevicesUtil = IcePy.defineValue('::SmartHome::DevicesUtil', Ice.Value, -1, (), False, True, None, ())

if 'DevicesUtilPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicesUtilPrx = Ice.createTempClass()
    class DevicesUtilPrx(Ice.ObjectPrx):

        def getAvailableDevices(self, context=None):
            return _M_SmartHome.DevicesUtil._op_getAvailableDevices.invoke(self, ((), context))

        def getAvailableDevicesAsync(self, context=None):
            return _M_SmartHome.DevicesUtil._op_getAvailableDevices.invokeAsync(self, ((), context))

        def begin_getAvailableDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DevicesUtil._op_getAvailableDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getAvailableDevices(self, _r):
            return _M_SmartHome.DevicesUtil._op_getAvailableDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicesUtilPrx.ice_checkedCast(proxy, '::SmartHome::DevicesUtil', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicesUtilPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DevicesUtil'
    _M_SmartHome._t_DevicesUtilPrx = IcePy.defineProxy('::SmartHome::DevicesUtil', DevicesUtilPrx)

    _M_SmartHome.DevicesUtilPrx = DevicesUtilPrx
    del DevicesUtilPrx

    _M_SmartHome.DevicesUtil = Ice.createTempClass()
    class DevicesUtil(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::DevicesUtil')

        def ice_id(self, current=None):
            return '::SmartHome::DevicesUtil'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DevicesUtil'

        def getAvailableDevices(self, current=None):
            raise NotImplementedError("servant method 'getAvailableDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DevicesUtilDisp)

        __repr__ = __str__

    _M_SmartHome._t_DevicesUtilDisp = IcePy.defineClass('::SmartHome::DevicesUtil', DevicesUtil, (), None, ())
    DevicesUtil._ice_type = _M_SmartHome._t_DevicesUtilDisp

    DevicesUtil._op_getAvailableDevices = IcePy.Operation('getAvailableDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_AvailableDevices, False, 0), ())

    _M_SmartHome.DevicesUtil = DevicesUtil
    del DevicesUtil

# End of module SmartHome
