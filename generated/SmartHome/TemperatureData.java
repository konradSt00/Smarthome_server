//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class TemperatureData implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public int dayBack;

    public Temperature avgTemperature;

    public TemperatureData()
    {
        this.avgTemperature = new Temperature();
    }

    public TemperatureData(int dayBack, Temperature avgTemperature)
    {
        this.dayBack = dayBack;
        this.avgTemperature = avgTemperature;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TemperatureData r = null;
        if(rhs instanceof TemperatureData)
        {
            r = (TemperatureData)rhs;
        }

        if(r != null)
        {
            if(this.dayBack != r.dayBack)
            {
                return false;
            }
            if(this.avgTemperature != r.avgTemperature)
            {
                if(this.avgTemperature == null || r.avgTemperature == null || !this.avgTemperature.equals(r.avgTemperature))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::TemperatureData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dayBack);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, avgTemperature);
        return h_;
    }

    public TemperatureData clone()
    {
        TemperatureData c = null;
        try
        {
            c = (TemperatureData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.dayBack);
        Temperature.ice_write(ostr, this.avgTemperature);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.dayBack = istr.readInt();
        this.avgTemperature = Temperature.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, TemperatureData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public TemperatureData ice_read(com.zeroc.Ice.InputStream istr)
    {
        TemperatureData v = new TemperatureData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<TemperatureData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, TemperatureData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<TemperatureData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(TemperatureData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final TemperatureData _nullMarshalValue = new TemperatureData();

    /** @hidden */
    public static final long serialVersionUID = 1443475946L;
}
